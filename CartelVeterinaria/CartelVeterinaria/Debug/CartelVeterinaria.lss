
CartelVeterinaria.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  00800100  00800100  00000e68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002270  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8a  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000102a  00000000  00000000  0000400a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00005034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000920  00000000  00000000  00005338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001169  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	1e 02       	muls	r17, r30

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e4 ef       	ldi	r30, 0xF4	; 244
  ce:	fd e0       	ldi	r31, 0x0D	; 13
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a0 30       	cpi	r26, 0x00	; 0
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a2 3a       	cpi	r26, 0xA2	; 162
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 f2 06 	call	0xde4	; 0xde4 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 09 05 	call	0xa12	; 0xa12 <main>
 106:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_ZN12osciladorPWM7oscilarEv>:
		
		
		
	}
	
	void oscilar(){
 10e:	8f 92       	push	r8
 110:	9f 92       	push	r9
 112:	af 92       	push	r10
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
		t++;
 128:	ca 84       	ldd	r12, Y+10	; 0x0a
 12a:	db 84       	ldd	r13, Y+11	; 0x0b
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	c8 1a       	sub	r12, r24
 130:	d8 0a       	sbc	r13, r24
 132:	db 86       	std	Y+11, r13	; 0x0b
 134:	ca 86       	std	Y+10, r12	; 0x0a
			t=0;
		}
	}
	
	unsigned char funcion(){
		if (t<=t0){
 136:	08 81       	ld	r16, Y
 138:	19 81       	ldd	r17, Y+1	; 0x01
 13a:	0c 15       	cp	r16, r12
 13c:	1d 05       	cpc	r17, r13
 13e:	0c f0       	brlt	.+2      	; 0x142 <_ZN12osciladorPWM7oscilarEv+0x34>
 140:	59 c0       	rjmp	.+178    	; 0x1f4 <_ZN12osciladorPWM7oscilarEv+0xe6>
			return 0;
		}
		else if(t>t0 && t<=t1){
 142:	6a 81       	ldd	r22, Y+2	; 0x02
 144:	7b 81       	ldd	r23, Y+3	; 0x03
 146:	6c 15       	cp	r22, r12
 148:	7d 05       	cpc	r23, r13
 14a:	14 f1       	brlt	.+68     	; 0x190 <_ZN12osciladorPWM7oscilarEv+0x82>
			float aux = (PWM_MAX / (t1-t0)) * (t-t0);
			return (unsigned char)aux;
 14c:	60 1b       	sub	r22, r16
 14e:	71 0b       	sbc	r23, r17
 150:	07 2e       	mov	r0, r23
 152:	00 0c       	add	r0, r0
 154:	88 0b       	sbc	r24, r24
 156:	99 0b       	sbc	r25, r25
 158:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 15c:	9b 01       	movw	r18, r22
 15e:	ac 01       	movw	r20, r24
 160:	6c 85       	ldd	r22, Y+12	; 0x0c
 162:	7d 85       	ldd	r23, Y+13	; 0x0d
 164:	8e 85       	ldd	r24, Y+14	; 0x0e
 166:	9f 85       	ldd	r25, Y+15	; 0x0f
 168:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__divsf3>
 16c:	4b 01       	movw	r8, r22
 16e:	5c 01       	movw	r10, r24
 170:	b6 01       	movw	r22, r12
 172:	60 1b       	sub	r22, r16
 174:	71 0b       	sbc	r23, r17
 176:	07 2e       	mov	r0, r23
 178:	00 0c       	add	r0, r0
 17a:	88 0b       	sbc	r24, r24
 17c:	99 0b       	sbc	r25, r25
 17e:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 182:	9b 01       	movw	r18, r22
 184:	ac 01       	movw	r20, r24
 186:	c5 01       	movw	r24, r10
 188:	b4 01       	movw	r22, r8
 18a:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
 18e:	2f c0       	rjmp	.+94     	; 0x1ee <_ZN12osciladorPWM7oscilarEv+0xe0>
		}
		else if(t>t1 && t<=t2){
 190:	0c 81       	ldd	r16, Y+4	; 0x04
 192:	1d 81       	ldd	r17, Y+5	; 0x05
 194:	0c 15       	cp	r16, r12
 196:	1d 05       	cpc	r17, r13
 198:	2c f0       	brlt	.+10     	; 0x1a4 <_ZN12osciladorPWM7oscilarEv+0x96>
			return PWM_MAX;
 19a:	6c 85       	ldd	r22, Y+12	; 0x0c
 19c:	7d 85       	ldd	r23, Y+13	; 0x0d
 19e:	8e 85       	ldd	r24, Y+14	; 0x0e
 1a0:	9f 85       	ldd	r25, Y+15	; 0x0f
 1a2:	25 c0       	rjmp	.+74     	; 0x1ee <_ZN12osciladorPWM7oscilarEv+0xe0>
		}
		else if(t>t2 && t<=t3){
 1a4:	ee 80       	ldd	r14, Y+6	; 0x06
 1a6:	ff 80       	ldd	r15, Y+7	; 0x07
 1a8:	ec 14       	cp	r14, r12
 1aa:	fd 04       	cpc	r15, r13
 1ac:	1c f1       	brlt	.+70     	; 0x1f4 <_ZN12osciladorPWM7oscilarEv+0xe6>
			float aux = (PWM_MAX * (t-t3)) / (t2-t3);
			return (unsigned char)aux;
 1ae:	b6 01       	movw	r22, r12
 1b0:	6e 19       	sub	r22, r14
 1b2:	7f 09       	sbc	r23, r15
 1b4:	07 2e       	mov	r0, r23
 1b6:	00 0c       	add	r0, r0
 1b8:	88 0b       	sbc	r24, r24
 1ba:	99 0b       	sbc	r25, r25
 1bc:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 1c0:	2c 85       	ldd	r18, Y+12	; 0x0c
 1c2:	3d 85       	ldd	r19, Y+13	; 0x0d
 1c4:	4e 85       	ldd	r20, Y+14	; 0x0e
 1c6:	5f 85       	ldd	r21, Y+15	; 0x0f
 1c8:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3>
 1cc:	4b 01       	movw	r8, r22
 1ce:	5c 01       	movw	r10, r24
 1d0:	b8 01       	movw	r22, r16
 1d2:	6e 19       	sub	r22, r14
 1d4:	7f 09       	sbc	r23, r15
 1d6:	07 2e       	mov	r0, r23
 1d8:	00 0c       	add	r0, r0
 1da:	88 0b       	sbc	r24, r24
 1dc:	99 0b       	sbc	r25, r25
 1de:	0e 94 0f 04 	call	0x81e	; 0x81e <__floatsisf>
 1e2:	9b 01       	movw	r18, r22
 1e4:	ac 01       	movw	r20, r24
 1e6:	c5 01       	movw	r24, r10
 1e8:	b4 01       	movw	r22, r8
 1ea:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__divsf3>
 1ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fixunssfsi>
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <_ZN12osciladorPWM7oscilarEv+0xe8>
		}
		else if(t>t3){
			return 0;
 1f4:	60 e0       	ldi	r22, 0x00	; 0
		
	}
	
	void oscilar(){
		t++;
		analogWrite(pin,funcion());
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	88 89       	ldd	r24, Y+16	; 0x10
 1fa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <analogWrite>
		if (t>t4){
 1fe:	2a 85       	ldd	r18, Y+10	; 0x0a
 200:	3b 85       	ldd	r19, Y+11	; 0x0b
 202:	88 85       	ldd	r24, Y+8	; 0x08
 204:	99 85       	ldd	r25, Y+9	; 0x09
 206:	82 17       	cp	r24, r18
 208:	93 07       	cpc	r25, r19
 20a:	14 f4       	brge	.+4      	; 0x210 <_ZN12osciladorPWM7oscilarEv+0x102>
			t=0;
 20c:	1b 86       	std	Y+11, r1	; 0x0b
 20e:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	cf 90       	pop	r12
 220:	bf 90       	pop	r11
 222:	af 90       	pop	r10
 224:	9f 90       	pop	r9
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <setup>:
osciladorPWM PWM7c = osciladorPWM(circ,255,0,400,200,400,400);


void setup() {
	//GPIO
	pinMode(cruz1,OUTPUT);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
	pinMode(cruz2,OUTPUT);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
	pinMode(circ,OUTPUT);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
	//PCICR = 0x02;	//Habilita las interrupciones por cambio desde A0 a A5
	//PCMSK1 = 0x0F;	//Habilita las interrupciones de A0:A4
	
	
	
	digitalWrite(cruz1,LOW);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
	digitalWrite(cruz2,LOW);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
	digitalWrite(circ,LOW);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <digitalWrite>

0000025a <loop>:
}

void loop() {
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
		//while(1);
	//}
	
	
	//Modo 0
	digitalWrite(circ,HIGH);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
	digitalWrite(cruz1,HIGH);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
	digitalWrite(cruz2,HIGH);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
	delay(5000);
 276:	68 e8       	ldi	r22, 0x88	; 136
 278:	73 e1       	ldi	r23, 0x13	; 19
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 282:	c5 e0       	ldi	r28, 0x05	; 5
 284:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Modo 1
	for(int i=0; i<5;i++){
		digitalWrite(cruz1,LOW);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 28e:	68 ec       	ldi	r22, 0xC8	; 200
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(cruz2,LOW);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 2a2:	68 ec       	ldi	r22, 0xC8	; 200
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(circ,LOW);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 2b6:	68 ec       	ldi	r22, 0xC8	; 200
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(cruz1,HIGH);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 2ca:	68 ec       	ldi	r22, 0xC8	; 200
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(cruz2,HIGH);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 2de:	68 ec       	ldi	r22, 0xC8	; 200
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(circ,HIGH);
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 2f2:	68 ec       	ldi	r22, 0xC8	; 200
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 2fe:	21 97       	sbiw	r28, 0x01	; 1
	digitalWrite(cruz1,HIGH);
	digitalWrite(cruz2,HIGH);
	delay(5000);
	
	//Modo 1
	for(int i=0; i<5;i++){
 300:	11 f6       	brne	.-124    	; 0x286 <loop+0x2c>
 302:	cc e0       	ldi	r28, 0x0C	; 12
 304:	d0 e0       	ldi	r29, 0x00	; 0
		delay(200);
	}
	
	//Modo 2
	for(int i=0;i<12;i++){
		digitalWrite(cruz1,LOW);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 30e:	68 ec       	ldi	r22, 0xC8	; 200
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(cruz1,HIGH);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 322:	68 ec       	ldi	r22, 0xC8	; 200
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 32e:	21 97       	sbiw	r28, 0x01	; 1
		digitalWrite(circ,HIGH);
		delay(200);
	}
	
	//Modo 2
	for(int i=0;i<12;i++){
 330:	51 f7       	brne	.-44     	; 0x306 <loop+0xac>
 332:	cc e0       	ldi	r28, 0x0C	; 12
 334:	d0 e0       	ldi	r29, 0x00	; 0
		delay(200);
	}
	
	//Modo 3
	for(int i=0;i<12;i++){
		digitalWrite(cruz2,LOW);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 33e:	68 ec       	ldi	r22, 0xC8	; 200
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(cruz2,HIGH);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(200);
 352:	68 ec       	ldi	r22, 0xC8	; 200
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 35e:	21 97       	sbiw	r28, 0x01	; 1
		digitalWrite(cruz1,HIGH);
		delay(200);
	}
	
	//Modo 3
	for(int i=0;i<12;i++){
 360:	51 f7       	brne	.-44     	; 0x336 <loop+0xdc>
 362:	cc e0       	ldi	r28, 0x0C	; 12
 364:	d0 e0       	ldi	r29, 0x00	; 0
		delay(200);
	}
	
	//Modo 4
	for(int i=0;i<12;i++){
		digitalWrite(cruz1,LOW);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	85 e0       	ldi	r24, 0x05	; 5
 36a:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		digitalWrite(cruz2,LOW);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		digitalWrite(circ,LOW);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(500);
 37e:	64 ef       	ldi	r22, 0xF4	; 244
 380:	71 e0       	ldi	r23, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
		digitalWrite(cruz1,HIGH);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		digitalWrite(cruz2,HIGH);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		digitalWrite(circ,HIGH);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	0e 94 c2 06 	call	0xd84	; 0xd84 <digitalWrite>
		delay(500);
 3a2:	64 ef       	ldi	r22, 0xF4	; 244
 3a4:	71 e0       	ldi	r23, 0x01	; 1
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 3ae:	21 97       	sbiw	r28, 0x01	; 1
		digitalWrite(cruz2,HIGH);
		delay(200);
	}
	
	//Modo 4
	for(int i=0;i<12;i++){
 3b0:	d1 f6       	brne	.-76     	; 0x366 <loop+0x10c>
 3b2:	c0 e1       	ldi	r28, 0x10	; 16
 3b4:	d7 e2       	ldi	r29, 0x27	; 39
	}


	//Modo 5
	for(int i=0;i<10000;i++){
		PWM5a.oscilar();
 3b6:	88 e8       	ldi	r24, 0x88	; 136
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		PWM5b.oscilar();
 3be:	87 e7       	ldi	r24, 0x77	; 119
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		PWM5c.oscilar();
 3c6:	86 e6       	ldi	r24, 0x66	; 102
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		delay(1);
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 3da:	21 97       	sbiw	r28, 0x01	; 1
		delay(500);
	}


	//Modo 5
	for(int i=0;i<10000;i++){
 3dc:	61 f7       	brne	.-40     	; 0x3b6 <loop+0x15c>
 3de:	c0 e1       	ldi	r28, 0x10	; 16
 3e0:	d7 e2       	ldi	r29, 0x27	; 39
		delay(1);
	}
	
	//Modo 6
	for(int i=0;i<10000;i++){
		PWM6a.oscilar();
 3e2:	85 e5       	ldi	r24, 0x55	; 85
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		PWM6b.oscilar();
 3ea:	84 e4       	ldi	r24, 0x44	; 68
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		PWM6c.oscilar();
 3f2:	83 e3       	ldi	r24, 0x33	; 51
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		delay(1);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 406:	21 97       	sbiw	r28, 0x01	; 1
		PWM5c.oscilar();
		delay(1);
	}
	
	//Modo 6
	for(int i=0;i<10000;i++){
 408:	61 f7       	brne	.-40     	; 0x3e2 <loop+0x188>
 40a:	c0 e1       	ldi	r28, 0x10	; 16
 40c:	d7 e2       	ldi	r29, 0x27	; 39
		delay(1);
	}
	
	//Modo 5
	for(int i=0;i<10000;i++){
		PWM7a.oscilar();
 40e:	82 e2       	ldi	r24, 0x22	; 34
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		PWM7b.oscilar();
 416:	81 e1       	ldi	r24, 0x11	; 17
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		PWM7c.oscilar();
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN12osciladorPWM7oscilarEv>
		delay(1);
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 87 05 	call	0xb0e	; 0xb0e <delay>
 432:	21 97       	sbiw	r28, 0x01	; 1
		PWM6c.oscilar();
		delay(1);
	}
	
	//Modo 5
	for(int i=0;i<10000;i++){
 434:	61 f7       	brne	.-40     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		PWM7a.oscilar();
		PWM7b.oscilar();
		PWM7c.oscilar();
		delay(1);
	}
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <_GLOBAL__sub_I_modo>:
 43c:	2f 92       	push	r2
 43e:	3f 92       	push	r3
 440:	4f 92       	push	r4
 442:	5f 92       	push	r5
 444:	6f 92       	push	r6
 446:	7f 92       	push	r7
 448:	8f 92       	push	r8
 44a:	9f 92       	push	r9
 44c:	af 92       	push	r10
 44e:	bf 92       	push	r11
 450:	cf 92       	push	r12
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 460:	88 e8       	ldi	r24, 0x88	; 136
 462:	e8 2e       	mov	r14, r24
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	f8 2e       	mov	r15, r24
 468:	f7 01       	movw	r30, r14
 46a:	13 86       	std	Z+11, r1	; 0x0b
 46c:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 478:	81 2c       	mov	r8, r1
 47a:	91 2c       	mov	r9, r1
 47c:	9f e7       	ldi	r25, 0x7F	; 127
 47e:	a9 2e       	mov	r10, r25
 480:	93 e4       	ldi	r25, 0x43	; 67
 482:	b9 2e       	mov	r11, r25
 484:	f7 01       	movw	r30, r14
 486:	84 86       	std	Z+12, r8	; 0x0c
 488:	95 86       	std	Z+13, r9	; 0x0d
 48a:	a6 86       	std	Z+14, r10	; 0x0e
 48c:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 48e:	11 82       	std	Z+1, r1	; 0x01
 490:	10 82       	st	Z, r1
		t1=t0+dt1;
 492:	c0 e9       	ldi	r28, 0x90	; 144
 494:	d1 e0       	ldi	r29, 0x01	; 1
 496:	d3 83       	std	Z+3, r29	; 0x03
 498:	c2 83       	std	Z+2, r28	; 0x02
		t2=t1+dt2;
 49a:	d5 83       	std	Z+5, r29	; 0x05
 49c:	c4 83       	std	Z+4, r28	; 0x04
		t3=t2+dt3;
 49e:	20 e2       	ldi	r18, 0x20	; 32
 4a0:	c2 2e       	mov	r12, r18
 4a2:	23 e0       	ldi	r18, 0x03	; 3
 4a4:	d2 2e       	mov	r13, r18
 4a6:	d7 82       	std	Z+7, r13	; 0x07
 4a8:	c6 82       	std	Z+6, r12	; 0x06
		t4=t3+dt4;
 4aa:	00 e6       	ldi	r16, 0x60	; 96
 4ac:	19 e0       	ldi	r17, 0x09	; 9
 4ae:	11 87       	std	Z+9, r17	; 0x09
 4b0:	00 87       	std	Z+8, r16	; 0x08
		t=0;
 4b2:	13 86       	std	Z+11, r1	; 0x0b
 4b4:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 4b6:	37 e7       	ldi	r19, 0x77	; 119
 4b8:	e3 2e       	mov	r14, r19
 4ba:	31 e0       	ldi	r19, 0x01	; 1
 4bc:	f3 2e       	mov	r15, r19
 4be:	f7 01       	movw	r30, r14
 4c0:	13 86       	std	Z+11, r1	; 0x0b
 4c2:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 4c4:	86 e0       	ldi	r24, 0x06	; 6
 4c6:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 4ce:	f7 01       	movw	r30, r14
 4d0:	84 86       	std	Z+12, r8	; 0x0c
 4d2:	95 86       	std	Z+13, r9	; 0x0d
 4d4:	a6 86       	std	Z+14, r10	; 0x0e
 4d6:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 4d8:	d1 82       	std	Z+1, r13	; 0x01
 4da:	c0 82       	st	Z, r12
		t1=t0+dt1;
 4dc:	80 eb       	ldi	r24, 0xB0	; 176
 4de:	94 e0       	ldi	r25, 0x04	; 4
 4e0:	93 83       	std	Z+3, r25	; 0x03
 4e2:	82 83       	std	Z+2, r24	; 0x02
		t2=t1+dt2;
 4e4:	95 83       	std	Z+5, r25	; 0x05
 4e6:	84 83       	std	Z+4, r24	; 0x04
		t3=t2+dt3;
 4e8:	40 e4       	ldi	r20, 0x40	; 64
 4ea:	64 2e       	mov	r6, r20
 4ec:	46 e0       	ldi	r20, 0x06	; 6
 4ee:	74 2e       	mov	r7, r20
 4f0:	77 82       	std	Z+7, r7	; 0x07
 4f2:	66 82       	std	Z+6, r6	; 0x06
		t4=t3+dt4;
 4f4:	11 87       	std	Z+9, r17	; 0x09
 4f6:	00 87       	std	Z+8, r16	; 0x08
		t=0;
 4f8:	13 86       	std	Z+11, r1	; 0x0b
 4fa:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 4fc:	56 e6       	ldi	r21, 0x66	; 102
 4fe:	e5 2e       	mov	r14, r21
 500:	51 e0       	ldi	r21, 0x01	; 1
 502:	f5 2e       	mov	r15, r21
 504:	f7 01       	movw	r30, r14
 506:	13 86       	std	Z+11, r1	; 0x0b
 508:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 514:	f7 01       	movw	r30, r14
 516:	84 86       	std	Z+12, r8	; 0x0c
 518:	95 86       	std	Z+13, r9	; 0x0d
 51a:	a6 86       	std	Z+14, r10	; 0x0e
 51c:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 51e:	71 82       	std	Z+1, r7	; 0x01
 520:	60 82       	st	Z, r6
		t1=t0+dt1;
 522:	80 ed       	ldi	r24, 0xD0	; 208
 524:	97 e0       	ldi	r25, 0x07	; 7
 526:	93 83       	std	Z+3, r25	; 0x03
 528:	82 83       	std	Z+2, r24	; 0x02
		t2=t1+dt2;
 52a:	95 83       	std	Z+5, r25	; 0x05
 52c:	84 83       	std	Z+4, r24	; 0x04
		t3=t2+dt3;
 52e:	17 83       	std	Z+7, r17	; 0x07
 530:	06 83       	std	Z+6, r16	; 0x06
		t4=t3+dt4;
 532:	11 87       	std	Z+9, r17	; 0x09
 534:	00 87       	std	Z+8, r16	; 0x08
		t=0;
 536:	13 86       	std	Z+11, r1	; 0x0b
 538:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 53a:	05 e5       	ldi	r16, 0x55	; 85
 53c:	11 e0       	ldi	r17, 0x01	; 1
 53e:	f8 01       	movw	r30, r16
 540:	13 86       	std	Z+11, r1	; 0x0b
 542:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 54e:	f8 01       	movw	r30, r16
 550:	84 86       	std	Z+12, r8	; 0x0c
 552:	95 86       	std	Z+13, r9	; 0x0d
 554:	a6 86       	std	Z+14, r10	; 0x0e
 556:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 558:	11 82       	std	Z+1, r1	; 0x01
 55a:	10 82       	st	Z, r1
		t1=t0+dt1;
 55c:	d3 83       	std	Z+3, r29	; 0x03
 55e:	c2 83       	std	Z+2, r28	; 0x02
		t2=t1+dt2;
 560:	68 e5       	ldi	r22, 0x58	; 88
 562:	46 2e       	mov	r4, r22
 564:	62 e0       	ldi	r22, 0x02	; 2
 566:	56 2e       	mov	r5, r22
 568:	55 82       	std	Z+5, r5	; 0x05
 56a:	44 82       	std	Z+4, r4	; 0x04
		t3=t2+dt3;
 56c:	78 ee       	ldi	r23, 0xE8	; 232
 56e:	e7 2e       	mov	r14, r23
 570:	73 e0       	ldi	r23, 0x03	; 3
 572:	f7 2e       	mov	r15, r23
 574:	f7 82       	std	Z+7, r15	; 0x07
 576:	e6 82       	std	Z+6, r14	; 0x06
		t4=t3+dt4;
 578:	a8 e0       	ldi	r26, 0x08	; 8
 57a:	6a 2e       	mov	r6, r26
 57c:	a7 e0       	ldi	r26, 0x07	; 7
 57e:	7a 2e       	mov	r7, r26
 580:	71 86       	std	Z+9, r7	; 0x09
 582:	60 86       	std	Z+8, r6	; 0x08
		t=0;
 584:	13 86       	std	Z+11, r1	; 0x0b
 586:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 588:	b4 e4       	ldi	r27, 0x44	; 68
 58a:	2b 2e       	mov	r2, r27
 58c:	b1 e0       	ldi	r27, 0x01	; 1
 58e:	3b 2e       	mov	r3, r27
 590:	f1 01       	movw	r30, r2
 592:	13 86       	std	Z+11, r1	; 0x0b
 594:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 596:	86 e0       	ldi	r24, 0x06	; 6
 598:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 5a0:	f1 01       	movw	r30, r2
 5a2:	84 86       	std	Z+12, r8	; 0x0c
 5a4:	95 86       	std	Z+13, r9	; 0x0d
 5a6:	a6 86       	std	Z+14, r10	; 0x0e
 5a8:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 5aa:	d1 83       	std	Z+1, r29	; 0x01
 5ac:	c0 83       	st	Z, r28
		t1=t0+dt1;
 5ae:	d3 82       	std	Z+3, r13	; 0x03
 5b0:	c2 82       	std	Z+2, r12	; 0x02
		t2=t1+dt2;
 5b2:	f5 82       	std	Z+5, r15	; 0x05
 5b4:	e4 82       	std	Z+4, r14	; 0x04
		t3=t2+dt3;
 5b6:	08 e7       	ldi	r16, 0x78	; 120
 5b8:	15 e0       	ldi	r17, 0x05	; 5
 5ba:	17 83       	std	Z+7, r17	; 0x07
 5bc:	06 83       	std	Z+6, r16	; 0x06
		t4=t3+dt4;
 5be:	71 86       	std	Z+9, r7	; 0x09
 5c0:	60 86       	std	Z+8, r6	; 0x08
		t=0;
 5c2:	13 86       	std	Z+11, r1	; 0x0b
 5c4:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 5c6:	83 e3       	ldi	r24, 0x33	; 51
 5c8:	28 2e       	mov	r2, r24
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	38 2e       	mov	r3, r24
 5ce:	f1 01       	movw	r30, r2
 5d0:	13 86       	std	Z+11, r1	; 0x0b
 5d2:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 5de:	f1 01       	movw	r30, r2
 5e0:	84 86       	std	Z+12, r8	; 0x0c
 5e2:	95 86       	std	Z+13, r9	; 0x0d
 5e4:	a6 86       	std	Z+14, r10	; 0x0e
 5e6:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 5e8:	d1 82       	std	Z+1, r13	; 0x01
 5ea:	c0 82       	st	Z, r12
		t1=t0+dt1;
 5ec:	80 eb       	ldi	r24, 0xB0	; 176
 5ee:	94 e0       	ldi	r25, 0x04	; 4
 5f0:	93 83       	std	Z+3, r25	; 0x03
 5f2:	82 83       	std	Z+2, r24	; 0x02
		t2=t1+dt2;
 5f4:	15 83       	std	Z+5, r17	; 0x05
 5f6:	04 83       	std	Z+4, r16	; 0x04
		t3=t2+dt3;
 5f8:	77 82       	std	Z+7, r7	; 0x07
 5fa:	66 82       	std	Z+6, r6	; 0x06
		t4=t3+dt4;
 5fc:	71 86       	std	Z+9, r7	; 0x09
 5fe:	60 86       	std	Z+8, r6	; 0x08
		t=0;
 600:	13 86       	std	Z+11, r1	; 0x0b
 602:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 604:	92 e2       	ldi	r25, 0x22	; 34
 606:	c9 2e       	mov	r12, r25
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	d9 2e       	mov	r13, r25
 60c:	f6 01       	movw	r30, r12
 60e:	13 86       	std	Z+11, r1	; 0x0b
 610:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 612:	85 e0       	ldi	r24, 0x05	; 5
 614:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 61c:	f6 01       	movw	r30, r12
 61e:	84 86       	std	Z+12, r8	; 0x0c
 620:	95 86       	std	Z+13, r9	; 0x0d
 622:	a6 86       	std	Z+14, r10	; 0x0e
 624:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 626:	11 82       	std	Z+1, r1	; 0x01
 628:	10 82       	st	Z, r1
		t1=t0+dt1;
 62a:	d3 83       	std	Z+3, r29	; 0x03
 62c:	c2 83       	std	Z+2, r28	; 0x02
		t2=t1+dt2;
 62e:	55 82       	std	Z+5, r5	; 0x05
 630:	44 82       	std	Z+4, r4	; 0x04
		t3=t2+dt3;
 632:	f7 82       	std	Z+7, r15	; 0x07
 634:	e6 82       	std	Z+6, r14	; 0x06
		t4=t3+dt4;
 636:	11 87       	std	Z+9, r17	; 0x09
 638:	00 87       	std	Z+8, r16	; 0x08
		t=0;
 63a:	13 86       	std	Z+11, r1	; 0x0b
 63c:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 63e:	21 e1       	ldi	r18, 0x11	; 17
 640:	c2 2e       	mov	r12, r18
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	d2 2e       	mov	r13, r18
 646:	f6 01       	movw	r30, r12
 648:	13 86       	std	Z+11, r1	; 0x0b
 64a:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 64c:	86 e0       	ldi	r24, 0x06	; 6
 64e:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 656:	f6 01       	movw	r30, r12
 658:	84 86       	std	Z+12, r8	; 0x0c
 65a:	95 86       	std	Z+13, r9	; 0x0d
 65c:	a6 86       	std	Z+14, r10	; 0x0e
 65e:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 660:	11 82       	std	Z+1, r1	; 0x01
 662:	10 82       	st	Z, r1
		t1=t0+dt1;
 664:	d3 83       	std	Z+3, r29	; 0x03
 666:	c2 83       	std	Z+2, r28	; 0x02
		t2=t1+dt2;
 668:	55 82       	std	Z+5, r5	; 0x05
 66a:	44 82       	std	Z+4, r4	; 0x04
		t3=t2+dt3;
 66c:	f7 82       	std	Z+7, r15	; 0x07
 66e:	e6 82       	std	Z+6, r14	; 0x06
		t4=t3+dt4;
 670:	11 87       	std	Z+9, r17	; 0x09
 672:	00 87       	std	Z+8, r16	; 0x08
		t=0;
 674:	13 86       	std	Z+11, r1	; 0x0b
 676:	12 86       	std	Z+10, r1	; 0x0a
	|----|---|--------|------|-------|--
	   t0   t1       t2     t3      t4  
     <-------------T---------------->
	*/
	//El constructor no es void, y tiene que tener si o si el mismo nombre que la clase
	osciladorPWM(unsigned char salida, int maximo,  int dt0,  int dt1,  int dt2,  int dt3,  int dt4){
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	c3 2e       	mov	r12, r19
 67c:	31 e0       	ldi	r19, 0x01	; 1
 67e:	d3 2e       	mov	r13, r19
 680:	f6 01       	movw	r30, r12
 682:	13 86       	std	Z+11, r1	; 0x0b
 684:	12 86       	std	Z+10, r1	; 0x0a
		pin = salida;
 686:	83 e0       	ldi	r24, 0x03	; 3
 688:	80 8b       	std	Z+16, r24	; 0x10
		pinMode(pin,OUTPUT);
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
		PWM_MAX = maximo;
 690:	f6 01       	movw	r30, r12
 692:	84 86       	std	Z+12, r8	; 0x0c
 694:	95 86       	std	Z+13, r9	; 0x0d
 696:	a6 86       	std	Z+14, r10	; 0x0e
 698:	b7 86       	std	Z+15, r11	; 0x0f
		
		t0=dt0;
 69a:	11 82       	std	Z+1, r1	; 0x01
 69c:	10 82       	st	Z, r1
		t1=t0+dt1;
 69e:	d3 83       	std	Z+3, r29	; 0x03
 6a0:	c2 83       	std	Z+2, r28	; 0x02
		t2=t1+dt2;
 6a2:	55 82       	std	Z+5, r5	; 0x05
 6a4:	44 82       	std	Z+4, r4	; 0x04
		t3=t2+dt3;
 6a6:	f7 82       	std	Z+7, r15	; 0x07
 6a8:	e6 82       	std	Z+6, r14	; 0x06
		t4=t3+dt4;
 6aa:	11 87       	std	Z+9, r17	; 0x09
 6ac:	00 87       	std	Z+8, r16	; 0x08
		t=0;
 6ae:	13 86       	std	Z+11, r1	; 0x0b
 6b0:	12 86       	std	Z+10, r1	; 0x0a
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	bf 90       	pop	r11
 6c4:	af 90       	pop	r10
 6c6:	9f 90       	pop	r9
 6c8:	8f 90       	pop	r8
 6ca:	7f 90       	pop	r7
 6cc:	6f 90       	pop	r6
 6ce:	5f 90       	pop	r5
 6d0:	4f 90       	pop	r4
 6d2:	3f 90       	pop	r3
 6d4:	2f 90       	pop	r2
 6d6:	08 95       	ret

000006d8 <__divsf3>:
 6d8:	0e 94 80 03 	call	0x700	; 0x700 <__divsf3x>
 6dc:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_round>
 6e0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscB>
 6e4:	58 f0       	brcs	.+22     	; 0x6fc <__divsf3+0x24>
 6e6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscA>
 6ea:	40 f0       	brcs	.+16     	; 0x6fc <__divsf3+0x24>
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <__divsf3+0x20>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	29 f0       	breq	.+10     	; 0x6fc <__divsf3+0x24>
 6f2:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 6f6:	51 11       	cpse	r21, r1
 6f8:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>
 6fc:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_nan>

00000700 <__divsf3x>:
 700:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_split3>
 704:	68 f3       	brcs	.-38     	; 0x6e0 <__divsf3+0x8>

00000706 <__divsf3_pse>:
 706:	99 23       	and	r25, r25
 708:	b1 f3       	breq	.-20     	; 0x6f6 <__divsf3+0x1e>
 70a:	55 23       	and	r21, r21
 70c:	91 f3       	breq	.-28     	; 0x6f2 <__divsf3+0x1a>
 70e:	95 1b       	sub	r25, r21
 710:	55 0b       	sbc	r21, r21
 712:	bb 27       	eor	r27, r27
 714:	aa 27       	eor	r26, r26
 716:	62 17       	cp	r22, r18
 718:	73 07       	cpc	r23, r19
 71a:	84 07       	cpc	r24, r20
 71c:	38 f0       	brcs	.+14     	; 0x72c <__divsf3_pse+0x26>
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	5f 4f       	sbci	r21, 0xFF	; 255
 722:	22 0f       	add	r18, r18
 724:	33 1f       	adc	r19, r19
 726:	44 1f       	adc	r20, r20
 728:	aa 1f       	adc	r26, r26
 72a:	a9 f3       	breq	.-22     	; 0x716 <__divsf3_pse+0x10>
 72c:	35 d0       	rcall	.+106    	; 0x798 <__divsf3_pse+0x92>
 72e:	0e 2e       	mov	r0, r30
 730:	3a f0       	brmi	.+14     	; 0x740 <__divsf3_pse+0x3a>
 732:	e0 e8       	ldi	r30, 0x80	; 128
 734:	32 d0       	rcall	.+100    	; 0x79a <__divsf3_pse+0x94>
 736:	91 50       	subi	r25, 0x01	; 1
 738:	50 40       	sbci	r21, 0x00	; 0
 73a:	e6 95       	lsr	r30
 73c:	00 1c       	adc	r0, r0
 73e:	ca f7       	brpl	.-14     	; 0x732 <__divsf3_pse+0x2c>
 740:	2b d0       	rcall	.+86     	; 0x798 <__divsf3_pse+0x92>
 742:	fe 2f       	mov	r31, r30
 744:	29 d0       	rcall	.+82     	; 0x798 <__divsf3_pse+0x92>
 746:	66 0f       	add	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	bb 1f       	adc	r27, r27
 74e:	26 17       	cp	r18, r22
 750:	37 07       	cpc	r19, r23
 752:	48 07       	cpc	r20, r24
 754:	ab 07       	cpc	r26, r27
 756:	b0 e8       	ldi	r27, 0x80	; 128
 758:	09 f0       	breq	.+2      	; 0x75c <__divsf3_pse+0x56>
 75a:	bb 0b       	sbc	r27, r27
 75c:	80 2d       	mov	r24, r0
 75e:	bf 01       	movw	r22, r30
 760:	ff 27       	eor	r31, r31
 762:	93 58       	subi	r25, 0x83	; 131
 764:	5f 4f       	sbci	r21, 0xFF	; 255
 766:	3a f0       	brmi	.+14     	; 0x776 <__divsf3_pse+0x70>
 768:	9e 3f       	cpi	r25, 0xFE	; 254
 76a:	51 05       	cpc	r21, r1
 76c:	78 f0       	brcs	.+30     	; 0x78c <__divsf3_pse+0x86>
 76e:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 772:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>
 776:	5f 3f       	cpi	r21, 0xFF	; 255
 778:	e4 f3       	brlt	.-8      	; 0x772 <__divsf3_pse+0x6c>
 77a:	98 3e       	cpi	r25, 0xE8	; 232
 77c:	d4 f3       	brlt	.-12     	; 0x772 <__divsf3_pse+0x6c>
 77e:	86 95       	lsr	r24
 780:	77 95       	ror	r23
 782:	67 95       	ror	r22
 784:	b7 95       	ror	r27
 786:	f7 95       	ror	r31
 788:	9f 5f       	subi	r25, 0xFF	; 255
 78a:	c9 f7       	brne	.-14     	; 0x77e <__divsf3_pse+0x78>
 78c:	88 0f       	add	r24, r24
 78e:	91 1d       	adc	r25, r1
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret
 798:	e1 e0       	ldi	r30, 0x01	; 1
 79a:	66 0f       	add	r22, r22
 79c:	77 1f       	adc	r23, r23
 79e:	88 1f       	adc	r24, r24
 7a0:	bb 1f       	adc	r27, r27
 7a2:	62 17       	cp	r22, r18
 7a4:	73 07       	cpc	r23, r19
 7a6:	84 07       	cpc	r24, r20
 7a8:	ba 07       	cpc	r27, r26
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__divsf3_pse+0xae>
 7ac:	62 1b       	sub	r22, r18
 7ae:	73 0b       	sbc	r23, r19
 7b0:	84 0b       	sbc	r24, r20
 7b2:	ba 0b       	sbc	r27, r26
 7b4:	ee 1f       	adc	r30, r30
 7b6:	88 f7       	brcc	.-30     	; 0x79a <__divsf3_pse+0x94>
 7b8:	e0 95       	com	r30
 7ba:	08 95       	ret

000007bc <__fixunssfsi>:
 7bc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__fp_splitA>
 7c0:	88 f0       	brcs	.+34     	; 0x7e4 <__fixunssfsi+0x28>
 7c2:	9f 57       	subi	r25, 0x7F	; 127
 7c4:	98 f0       	brcs	.+38     	; 0x7ec <__fixunssfsi+0x30>
 7c6:	b9 2f       	mov	r27, r25
 7c8:	99 27       	eor	r25, r25
 7ca:	b7 51       	subi	r27, 0x17	; 23
 7cc:	b0 f0       	brcs	.+44     	; 0x7fa <__fixunssfsi+0x3e>
 7ce:	e1 f0       	breq	.+56     	; 0x808 <__fixunssfsi+0x4c>
 7d0:	66 0f       	add	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	1a f0       	brmi	.+6      	; 0x7e0 <__fixunssfsi+0x24>
 7da:	ba 95       	dec	r27
 7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__fixunssfsi+0x14>
 7de:	14 c0       	rjmp	.+40     	; 0x808 <__fixunssfsi+0x4c>
 7e0:	b1 30       	cpi	r27, 0x01	; 1
 7e2:	91 f0       	breq	.+36     	; 0x808 <__fixunssfsi+0x4c>
 7e4:	0e 94 94 04 	call	0x928	; 0x928 <__fp_zero>
 7e8:	b1 e0       	ldi	r27, 0x01	; 1
 7ea:	08 95       	ret
 7ec:	0c 94 94 04 	jmp	0x928	; 0x928 <__fp_zero>
 7f0:	67 2f       	mov	r22, r23
 7f2:	78 2f       	mov	r23, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	b8 5f       	subi	r27, 0xF8	; 248
 7f8:	39 f0       	breq	.+14     	; 0x808 <__fixunssfsi+0x4c>
 7fa:	b9 3f       	cpi	r27, 0xF9	; 249
 7fc:	cc f3       	brlt	.-14     	; 0x7f0 <__fixunssfsi+0x34>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b3 95       	inc	r27
 806:	d9 f7       	brne	.-10     	; 0x7fe <__fixunssfsi+0x42>
 808:	3e f4       	brtc	.+14     	; 0x818 <__fixunssfsi+0x5c>
 80a:	90 95       	com	r25
 80c:	80 95       	com	r24
 80e:	70 95       	com	r23
 810:	61 95       	neg	r22
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <__floatunsisf>:
 81a:	e8 94       	clt
 81c:	09 c0       	rjmp	.+18     	; 0x830 <__floatsisf+0x12>

0000081e <__floatsisf>:
 81e:	97 fb       	bst	r25, 7
 820:	3e f4       	brtc	.+14     	; 0x830 <__floatsisf+0x12>
 822:	90 95       	com	r25
 824:	80 95       	com	r24
 826:	70 95       	com	r23
 828:	61 95       	neg	r22
 82a:	7f 4f       	sbci	r23, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	99 23       	and	r25, r25
 832:	a9 f0       	breq	.+42     	; 0x85e <__floatsisf+0x40>
 834:	f9 2f       	mov	r31, r25
 836:	96 e9       	ldi	r25, 0x96	; 150
 838:	bb 27       	eor	r27, r27
 83a:	93 95       	inc	r25
 83c:	f6 95       	lsr	r31
 83e:	87 95       	ror	r24
 840:	77 95       	ror	r23
 842:	67 95       	ror	r22
 844:	b7 95       	ror	r27
 846:	f1 11       	cpse	r31, r1
 848:	f8 cf       	rjmp	.-16     	; 0x83a <__floatsisf+0x1c>
 84a:	fa f4       	brpl	.+62     	; 0x88a <__floatsisf+0x6c>
 84c:	bb 0f       	add	r27, r27
 84e:	11 f4       	brne	.+4      	; 0x854 <__floatsisf+0x36>
 850:	60 ff       	sbrs	r22, 0
 852:	1b c0       	rjmp	.+54     	; 0x88a <__floatsisf+0x6c>
 854:	6f 5f       	subi	r22, 0xFF	; 255
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	16 c0       	rjmp	.+44     	; 0x88a <__floatsisf+0x6c>
 85e:	88 23       	and	r24, r24
 860:	11 f0       	breq	.+4      	; 0x866 <__floatsisf+0x48>
 862:	96 e9       	ldi	r25, 0x96	; 150
 864:	11 c0       	rjmp	.+34     	; 0x888 <__floatsisf+0x6a>
 866:	77 23       	and	r23, r23
 868:	21 f0       	breq	.+8      	; 0x872 <__floatsisf+0x54>
 86a:	9e e8       	ldi	r25, 0x8E	; 142
 86c:	87 2f       	mov	r24, r23
 86e:	76 2f       	mov	r23, r22
 870:	05 c0       	rjmp	.+10     	; 0x87c <__floatsisf+0x5e>
 872:	66 23       	and	r22, r22
 874:	71 f0       	breq	.+28     	; 0x892 <__floatsisf+0x74>
 876:	96 e8       	ldi	r25, 0x86	; 134
 878:	86 2f       	mov	r24, r22
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	2a f0       	brmi	.+10     	; 0x88a <__floatsisf+0x6c>
 880:	9a 95       	dec	r25
 882:	66 0f       	add	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	da f7       	brpl	.-10     	; 0x880 <__floatsisf+0x62>
 88a:	88 0f       	add	r24, r24
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret

00000894 <__fp_inf>:
 894:	97 f9       	bld	r25, 7
 896:	9f 67       	ori	r25, 0x7F	; 127
 898:	80 e8       	ldi	r24, 0x80	; 128
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	08 95       	ret

000008a0 <__fp_nan>:
 8a0:	9f ef       	ldi	r25, 0xFF	; 255
 8a2:	80 ec       	ldi	r24, 0xC0	; 192
 8a4:	08 95       	ret

000008a6 <__fp_pscA>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	16 16       	cp	r1, r22
 8ac:	17 06       	cpc	r1, r23
 8ae:	18 06       	cpc	r1, r24
 8b0:	09 06       	cpc	r0, r25
 8b2:	08 95       	ret

000008b4 <__fp_pscB>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	14 06       	cpc	r1, r20
 8be:	05 06       	cpc	r0, r21
 8c0:	08 95       	ret

000008c2 <__fp_round>:
 8c2:	09 2e       	mov	r0, r25
 8c4:	03 94       	inc	r0
 8c6:	00 0c       	add	r0, r0
 8c8:	11 f4       	brne	.+4      	; 0x8ce <__fp_round+0xc>
 8ca:	88 23       	and	r24, r24
 8cc:	52 f0       	brmi	.+20     	; 0x8e2 <__fp_round+0x20>
 8ce:	bb 0f       	add	r27, r27
 8d0:	40 f4       	brcc	.+16     	; 0x8e2 <__fp_round+0x20>
 8d2:	bf 2b       	or	r27, r31
 8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0x18>
 8d6:	60 ff       	sbrs	r22, 0
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__fp_round+0x20>
 8da:	6f 5f       	subi	r22, 0xFF	; 255
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__fp_split3>:
 8e4:	57 fd       	sbrc	r21, 7
 8e6:	90 58       	subi	r25, 0x80	; 128
 8e8:	44 0f       	add	r20, r20
 8ea:	55 1f       	adc	r21, r21
 8ec:	59 f0       	breq	.+22     	; 0x904 <__stack+0x5>
 8ee:	5f 3f       	cpi	r21, 0xFF	; 255
 8f0:	71 f0       	breq	.+28     	; 0x90e <__stack+0xf>
 8f2:	47 95       	ror	r20

000008f4 <__fp_splitA>:
 8f4:	88 0f       	add	r24, r24
 8f6:	97 fb       	bst	r25, 7
 8f8:	99 1f       	adc	r25, r25
 8fa:	61 f0       	breq	.+24     	; 0x914 <__stack+0x15>
 8fc:	9f 3f       	cpi	r25, 0xFF	; 255
 8fe:	79 f0       	breq	.+30     	; 0x91e <__stack+0x1f>
 900:	87 95       	ror	r24
 902:	08 95       	ret
 904:	12 16       	cp	r1, r18
 906:	13 06       	cpc	r1, r19
 908:	14 06       	cpc	r1, r20
 90a:	55 1f       	adc	r21, r21
 90c:	f2 cf       	rjmp	.-28     	; 0x8f2 <__fp_split3+0xe>
 90e:	46 95       	lsr	r20
 910:	f1 df       	rcall	.-30     	; 0x8f4 <__fp_splitA>
 912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0x25>
 914:	16 16       	cp	r1, r22
 916:	17 06       	cpc	r1, r23
 918:	18 06       	cpc	r1, r24
 91a:	99 1f       	adc	r25, r25
 91c:	f1 cf       	rjmp	.-30     	; 0x900 <__stack+0x1>
 91e:	86 95       	lsr	r24
 920:	71 05       	cpc	r23, r1
 922:	61 05       	cpc	r22, r1
 924:	08 94       	sec
 926:	08 95       	ret

00000928 <__fp_zero>:
 928:	e8 94       	clt

0000092a <__fp_szero>:
 92a:	bb 27       	eor	r27, r27
 92c:	66 27       	eor	r22, r22
 92e:	77 27       	eor	r23, r23
 930:	cb 01       	movw	r24, r22
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__mulsf3>:
 936:	0e 94 ae 04 	call	0x95c	; 0x95c <__mulsf3x>
 93a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_round>
 93e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscA>
 942:	38 f0       	brcs	.+14     	; 0x952 <__mulsf3+0x1c>
 944:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscB>
 948:	20 f0       	brcs	.+8      	; 0x952 <__mulsf3+0x1c>
 94a:	95 23       	and	r25, r21
 94c:	11 f0       	breq	.+4      	; 0x952 <__mulsf3+0x1c>
 94e:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 952:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_nan>
 956:	11 24       	eor	r1, r1
 958:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>

0000095c <__mulsf3x>:
 95c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__fp_split3>
 960:	70 f3       	brcs	.-36     	; 0x93e <__mulsf3+0x8>

00000962 <__mulsf3_pse>:
 962:	95 9f       	mul	r25, r21
 964:	c1 f3       	breq	.-16     	; 0x956 <__mulsf3+0x20>
 966:	95 0f       	add	r25, r21
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	55 1f       	adc	r21, r21
 96c:	62 9f       	mul	r22, r18
 96e:	f0 01       	movw	r30, r0
 970:	72 9f       	mul	r23, r18
 972:	bb 27       	eor	r27, r27
 974:	f0 0d       	add	r31, r0
 976:	b1 1d       	adc	r27, r1
 978:	63 9f       	mul	r22, r19
 97a:	aa 27       	eor	r26, r26
 97c:	f0 0d       	add	r31, r0
 97e:	b1 1d       	adc	r27, r1
 980:	aa 1f       	adc	r26, r26
 982:	64 9f       	mul	r22, r20
 984:	66 27       	eor	r22, r22
 986:	b0 0d       	add	r27, r0
 988:	a1 1d       	adc	r26, r1
 98a:	66 1f       	adc	r22, r22
 98c:	82 9f       	mul	r24, r18
 98e:	22 27       	eor	r18, r18
 990:	b0 0d       	add	r27, r0
 992:	a1 1d       	adc	r26, r1
 994:	62 1f       	adc	r22, r18
 996:	73 9f       	mul	r23, r19
 998:	b0 0d       	add	r27, r0
 99a:	a1 1d       	adc	r26, r1
 99c:	62 1f       	adc	r22, r18
 99e:	83 9f       	mul	r24, r19
 9a0:	a0 0d       	add	r26, r0
 9a2:	61 1d       	adc	r22, r1
 9a4:	22 1f       	adc	r18, r18
 9a6:	74 9f       	mul	r23, r20
 9a8:	33 27       	eor	r19, r19
 9aa:	a0 0d       	add	r26, r0
 9ac:	61 1d       	adc	r22, r1
 9ae:	23 1f       	adc	r18, r19
 9b0:	84 9f       	mul	r24, r20
 9b2:	60 0d       	add	r22, r0
 9b4:	21 1d       	adc	r18, r1
 9b6:	82 2f       	mov	r24, r18
 9b8:	76 2f       	mov	r23, r22
 9ba:	6a 2f       	mov	r22, r26
 9bc:	11 24       	eor	r1, r1
 9be:	9f 57       	subi	r25, 0x7F	; 127
 9c0:	50 40       	sbci	r21, 0x00	; 0
 9c2:	9a f0       	brmi	.+38     	; 0x9ea <__mulsf3_pse+0x88>
 9c4:	f1 f0       	breq	.+60     	; 0xa02 <__mulsf3_pse+0xa0>
 9c6:	88 23       	and	r24, r24
 9c8:	4a f0       	brmi	.+18     	; 0x9dc <__mulsf3_pse+0x7a>
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	bb 1f       	adc	r27, r27
 9d0:	66 1f       	adc	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	91 50       	subi	r25, 0x01	; 1
 9d8:	50 40       	sbci	r21, 0x00	; 0
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__mulsf3_pse+0x64>
 9dc:	9e 3f       	cpi	r25, 0xFE	; 254
 9de:	51 05       	cpc	r21, r1
 9e0:	80 f0       	brcs	.+32     	; 0xa02 <__mulsf3_pse+0xa0>
 9e2:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_inf>
 9e6:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_szero>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	e4 f3       	brlt	.-8      	; 0x9e6 <__mulsf3_pse+0x84>
 9ee:	98 3e       	cpi	r25, 0xE8	; 232
 9f0:	d4 f3       	brlt	.-12     	; 0x9e6 <__mulsf3_pse+0x84>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	e7 95       	ror	r30
 9fe:	9f 5f       	subi	r25, 0xFF	; 255
 a00:	c1 f7       	brne	.-16     	; 0x9f2 <__mulsf3_pse+0x90>
 a02:	fe 2b       	or	r31, r30
 a04:	88 0f       	add	r24, r24
 a06:	91 1d       	adc	r25, r1
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <initVariant>:
 a10:	08 95       	ret

00000a12 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 a12:	0e 94 c3 05 	call	0xb86	; 0xb86 <init>

	initVariant();
 a16:	0e 94 08 05 	call	0xa10	; 0xa10 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a1a:	0e 94 15 01 	call	0x22a	; 0x22a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a1e:	c0 e0       	ldi	r28, 0x00	; 0
 a20:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 a22:	0e 94 2d 01 	call	0x25a	; 0x25a <loop>
		if (serialEventRun) serialEventRun();
 a26:	20 97       	sbiw	r28, 0x00	; 0
 a28:	e1 f3       	breq	.-8      	; 0xa22 <main+0x10>
 a2a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 a2e:	f9 cf       	rjmp	.-14     	; 0xa22 <main+0x10>

00000a30 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	8f 93       	push	r24
 a40:	9f 93       	push	r25
 a42:	af 93       	push	r26
 a44:	bf 93       	push	r27
 a46:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <timer0_millis>
 a4a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <timer0_millis+0x1>
 a4e:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <timer0_millis+0x2>
 a52:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <timer0_millis+0x3>
 a56:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <timer0_fract>
 a5a:	23 e0       	ldi	r18, 0x03	; 3
 a5c:	23 0f       	add	r18, r19
 a5e:	2d 37       	cpi	r18, 0x7D	; 125
 a60:	20 f4       	brcc	.+8      	; 0xa6a <__vector_16+0x3a>
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	a1 1d       	adc	r26, r1
 a66:	b1 1d       	adc	r27, r1
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <__vector_16+0x44>
 a6a:	26 e8       	ldi	r18, 0x86	; 134
 a6c:	23 0f       	add	r18, r19
 a6e:	02 96       	adiw	r24, 0x02	; 2
 a70:	a1 1d       	adc	r26, r1
 a72:	b1 1d       	adc	r27, r1
 a74:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <timer0_fract>
 a78:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timer0_millis>
 a7c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timer0_millis+0x1>
 a80:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timer0_millis+0x2>
 a84:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timer0_millis+0x3>
 a88:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <timer0_overflow_count>
 a8c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <timer0_overflow_count+0x1>
 a90:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <timer0_overflow_count+0x2>
 a94:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <timer0_overflow_count+0x3>
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	a1 1d       	adc	r26, r1
 a9c:	b1 1d       	adc	r27, r1
 a9e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <timer0_overflow_count>
 aa2:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <timer0_overflow_count+0x1>
 aa6:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <timer0_overflow_count+0x2>
 aaa:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <timer0_overflow_count+0x3>
 aae:	bf 91       	pop	r27
 ab0:	af 91       	pop	r26
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	3f 91       	pop	r19
 ab8:	2f 91       	pop	r18
 aba:	0f 90       	pop	r0
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	0f 90       	pop	r0
 ac0:	1f 90       	pop	r1
 ac2:	18 95       	reti

00000ac4 <micros>:
 ac4:	3f b7       	in	r19, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <timer0_overflow_count>
 acc:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <timer0_overflow_count+0x1>
 ad0:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <timer0_overflow_count+0x2>
 ad4:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <timer0_overflow_count+0x3>
 ad8:	26 b5       	in	r18, 0x26	; 38
 ada:	a8 9b       	sbis	0x15, 0	; 21
 adc:	05 c0       	rjmp	.+10     	; 0xae8 <micros+0x24>
 ade:	2f 3f       	cpi	r18, 0xFF	; 255
 ae0:	19 f0       	breq	.+6      	; 0xae8 <micros+0x24>
 ae2:	01 96       	adiw	r24, 0x01	; 1
 ae4:	a1 1d       	adc	r26, r1
 ae6:	b1 1d       	adc	r27, r1
 ae8:	3f bf       	out	0x3f, r19	; 63
 aea:	ba 2f       	mov	r27, r26
 aec:	a9 2f       	mov	r26, r25
 aee:	98 2f       	mov	r25, r24
 af0:	88 27       	eor	r24, r24
 af2:	82 0f       	add	r24, r18
 af4:	91 1d       	adc	r25, r1
 af6:	a1 1d       	adc	r26, r1
 af8:	b1 1d       	adc	r27, r1
 afa:	bc 01       	movw	r22, r24
 afc:	cd 01       	movw	r24, r26
 afe:	42 e0       	ldi	r20, 0x02	; 2
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	4a 95       	dec	r20
 b0a:	d1 f7       	brne	.-12     	; 0xb00 <micros+0x3c>
 b0c:	08 95       	ret

00000b0e <delay>:
 b0e:	8f 92       	push	r8
 b10:	9f 92       	push	r9
 b12:	af 92       	push	r10
 b14:	bf 92       	push	r11
 b16:	cf 92       	push	r12
 b18:	df 92       	push	r13
 b1a:	ef 92       	push	r14
 b1c:	ff 92       	push	r15
 b1e:	6b 01       	movw	r12, r22
 b20:	7c 01       	movw	r14, r24
 b22:	0e 94 62 05 	call	0xac4	; 0xac4 <micros>
 b26:	4b 01       	movw	r8, r22
 b28:	5c 01       	movw	r10, r24
 b2a:	c1 14       	cp	r12, r1
 b2c:	d1 04       	cpc	r13, r1
 b2e:	e1 04       	cpc	r14, r1
 b30:	f1 04       	cpc	r15, r1
 b32:	01 f1       	breq	.+64     	; 0xb74 <delay+0x66>
 b34:	0e 94 f1 06 	call	0xde2	; 0xde2 <yield>
 b38:	0e 94 62 05 	call	0xac4	; 0xac4 <micros>
 b3c:	dc 01       	movw	r26, r24
 b3e:	cb 01       	movw	r24, r22
 b40:	88 19       	sub	r24, r8
 b42:	99 09       	sbc	r25, r9
 b44:	aa 09       	sbc	r26, r10
 b46:	bb 09       	sbc	r27, r11
 b48:	88 3e       	cpi	r24, 0xE8	; 232
 b4a:	93 40       	sbci	r25, 0x03	; 3
 b4c:	a1 05       	cpc	r26, r1
 b4e:	b1 05       	cpc	r27, r1
 b50:	60 f3       	brcs	.-40     	; 0xb2a <delay+0x1c>
 b52:	21 e0       	ldi	r18, 0x01	; 1
 b54:	c2 1a       	sub	r12, r18
 b56:	d1 08       	sbc	r13, r1
 b58:	e1 08       	sbc	r14, r1
 b5a:	f1 08       	sbc	r15, r1
 b5c:	88 ee       	ldi	r24, 0xE8	; 232
 b5e:	88 0e       	add	r8, r24
 b60:	83 e0       	ldi	r24, 0x03	; 3
 b62:	98 1e       	adc	r9, r24
 b64:	a1 1c       	adc	r10, r1
 b66:	b1 1c       	adc	r11, r1
 b68:	c1 14       	cp	r12, r1
 b6a:	d1 04       	cpc	r13, r1
 b6c:	e1 04       	cpc	r14, r1
 b6e:	f1 04       	cpc	r15, r1
 b70:	19 f7       	brne	.-58     	; 0xb38 <delay+0x2a>
 b72:	db cf       	rjmp	.-74     	; 0xb2a <delay+0x1c>
 b74:	ff 90       	pop	r15
 b76:	ef 90       	pop	r14
 b78:	df 90       	pop	r13
 b7a:	cf 90       	pop	r12
 b7c:	bf 90       	pop	r11
 b7e:	af 90       	pop	r10
 b80:	9f 90       	pop	r9
 b82:	8f 90       	pop	r8
 b84:	08 95       	ret

00000b86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b88:	84 b5       	in	r24, 0x24	; 36
 b8a:	82 60       	ori	r24, 0x02	; 2
 b8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b8e:	84 b5       	in	r24, 0x24	; 36
 b90:	81 60       	ori	r24, 0x01	; 1
 b92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b94:	85 b5       	in	r24, 0x25	; 37
 b96:	82 60       	ori	r24, 0x02	; 2
 b98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b9a:	85 b5       	in	r24, 0x25	; 37
 b9c:	81 60       	ori	r24, 0x01	; 1
 b9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 ba0:	ee e6       	ldi	r30, 0x6E	; 110
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	80 81       	ld	r24, Z
 ba6:	81 60       	ori	r24, 0x01	; 1
 ba8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 baa:	e1 e8       	ldi	r30, 0x81	; 129
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 bb0:	80 81       	ld	r24, Z
 bb2:	82 60       	ori	r24, 0x02	; 2
 bb4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 bb6:	80 81       	ld	r24, Z
 bb8:	81 60       	ori	r24, 0x01	; 1
 bba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 bbc:	e0 e8       	ldi	r30, 0x80	; 128
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	80 81       	ld	r24, Z
 bc2:	81 60       	ori	r24, 0x01	; 1
 bc4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 bc6:	e1 eb       	ldi	r30, 0xB1	; 177
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	84 60       	ori	r24, 0x04	; 4
 bce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 bd0:	e0 eb       	ldi	r30, 0xB0	; 176
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	81 60       	ori	r24, 0x01	; 1
 bd8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 bda:	ea e7       	ldi	r30, 0x7A	; 122
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	84 60       	ori	r24, 0x04	; 4
 be2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 be4:	80 81       	ld	r24, Z
 be6:	82 60       	ori	r24, 0x02	; 2
 be8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 bea:	80 81       	ld	r24, Z
 bec:	81 60       	ori	r24, 0x01	; 1
 bee:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 bf0:	80 81       	ld	r24, Z
 bf2:	80 68       	ori	r24, 0x80	; 128
 bf4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 bf6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 bfa:	08 95       	ret

00000bfc <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 bfc:	1f 93       	push	r17
 bfe:	cf 93       	push	r28
 c00:	df 93       	push	r29
 c02:	18 2f       	mov	r17, r24
 c04:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 c06:	61 e0       	ldi	r22, 0x01	; 1
 c08:	0e 94 86 06 	call	0xd0c	; 0xd0c <pinMode>
	if (val == 0)
 c0c:	20 97       	sbiw	r28, 0x00	; 0
 c0e:	11 f4       	brne	.+4      	; 0xc14 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
 c10:	60 e0       	ldi	r22, 0x00	; 0
 c12:	04 c0       	rjmp	.+8      	; 0xc1c <analogWrite+0x20>
	}
	else if (val == 255)
 c14:	cf 3f       	cpi	r28, 0xFF	; 255
 c16:	d1 05       	cpc	r29, r1
 c18:	39 f4       	brne	.+14     	; 0xc28 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
 c1a:	61 e0       	ldi	r22, 0x01	; 1
 c1c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
 c24:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
 c28:	e1 2f       	mov	r30, r17
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	e8 59       	subi	r30, 0x98	; 152
 c2e:	ff 4f       	sbci	r31, 0xFF	; 255
 c30:	e4 91       	lpm	r30, Z
 c32:	e3 30       	cpi	r30, 0x03	; 3
 c34:	f9 f0       	breq	.+62     	; 0xc74 <analogWrite+0x78>
 c36:	48 f4       	brcc	.+18     	; 0xc4a <analogWrite+0x4e>
 c38:	e1 30       	cpi	r30, 0x01	; 1
 c3a:	b9 f0       	breq	.+46     	; 0xc6a <analogWrite+0x6e>
 c3c:	e2 30       	cpi	r30, 0x02	; 2
 c3e:	a1 f5       	brne	.+104    	; 0xca8 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 c40:	84 b5       	in	r24, 0x24	; 36
 c42:	80 62       	ori	r24, 0x20	; 32
 c44:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 c46:	c8 bd       	out	0x28, r28	; 40
				break;
 c48:	34 c0       	rjmp	.+104    	; 0xcb2 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 c4a:	e7 30       	cpi	r30, 0x07	; 7
 c4c:	e9 f0       	breq	.+58     	; 0xc88 <analogWrite+0x8c>
 c4e:	e8 30       	cpi	r30, 0x08	; 8
 c50:	19 f1       	breq	.+70     	; 0xc98 <analogWrite+0x9c>
 c52:	e4 30       	cpi	r30, 0x04	; 4
 c54:	49 f5       	brne	.+82     	; 0xca8 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 c56:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 c5a:	80 62       	ori	r24, 0x20	; 32
 c5c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
 c60:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 c64:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
 c68:	24 c0       	rjmp	.+72     	; 0xcb2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 c6a:	84 b5       	in	r24, 0x24	; 36
 c6c:	80 68       	ori	r24, 0x80	; 128
 c6e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 c70:	c7 bd       	out	0x27, r28	; 39
				break;
 c72:	1f c0       	rjmp	.+62     	; 0xcb2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 c74:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 c78:	80 68       	ori	r24, 0x80	; 128
 c7a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
 c7e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c82:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
 c86:	15 c0       	rjmp	.+42     	; 0xcb2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 c88:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 c8c:	80 68       	ori	r24, 0x80	; 128
 c8e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
 c92:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
 c96:	0d c0       	rjmp	.+26     	; 0xcb2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 c98:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 c9c:	80 62       	ori	r24, 0x20	; 32
 c9e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
 ca2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
 ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 ca8:	c0 38       	cpi	r28, 0x80	; 128
 caa:	d1 05       	cpc	r29, r1
 cac:	0c f0       	brlt	.+2      	; 0xcb0 <analogWrite+0xb4>
 cae:	b5 cf       	rjmp	.-150    	; 0xc1a <analogWrite+0x1e>
 cb0:	af cf       	rjmp	.-162    	; 0xc10 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 cb2:	df 91       	pop	r29
 cb4:	cf 91       	pop	r28
 cb6:	1f 91       	pop	r17
 cb8:	08 95       	ret

00000cba <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 cba:	83 30       	cpi	r24, 0x03	; 3
 cbc:	81 f0       	breq	.+32     	; 0xcde <turnOffPWM+0x24>
 cbe:	28 f4       	brcc	.+10     	; 0xcca <turnOffPWM+0x10>
 cc0:	81 30       	cpi	r24, 0x01	; 1
 cc2:	99 f0       	breq	.+38     	; 0xcea <turnOffPWM+0x30>
 cc4:	82 30       	cpi	r24, 0x02	; 2
 cc6:	a1 f0       	breq	.+40     	; 0xcf0 <turnOffPWM+0x36>
 cc8:	08 95       	ret
 cca:	87 30       	cpi	r24, 0x07	; 7
 ccc:	a9 f0       	breq	.+42     	; 0xcf8 <turnOffPWM+0x3e>
 cce:	88 30       	cpi	r24, 0x08	; 8
 cd0:	b9 f0       	breq	.+46     	; 0xd00 <turnOffPWM+0x46>
 cd2:	84 30       	cpi	r24, 0x04	; 4
 cd4:	d1 f4       	brne	.+52     	; 0xd0a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 cd6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 cda:	8f 7d       	andi	r24, 0xDF	; 223
 cdc:	03 c0       	rjmp	.+6      	; 0xce4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 cde:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 ce2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 ce4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 ce8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 cea:	84 b5       	in	r24, 0x24	; 36
 cec:	8f 77       	andi	r24, 0x7F	; 127
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 cf0:	84 b5       	in	r24, 0x24	; 36
 cf2:	8f 7d       	andi	r24, 0xDF	; 223
 cf4:	84 bd       	out	0x24, r24	; 36
 cf6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 cf8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 cfc:	8f 77       	andi	r24, 0x7F	; 127
 cfe:	03 c0       	rjmp	.+6      	; 0xd06 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 d00:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d04:	8f 7d       	andi	r24, 0xDF	; 223
 d06:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 d0a:	08 95       	ret

00000d0c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	fc 01       	movw	r30, r24
 d14:	e4 58       	subi	r30, 0x84	; 132
 d16:	ff 4f       	sbci	r31, 0xFF	; 255
 d18:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 d1a:	fc 01       	movw	r30, r24
 d1c:	e0 57       	subi	r30, 0x70	; 112
 d1e:	ff 4f       	sbci	r31, 0xFF	; 255
 d20:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 d22:	88 23       	and	r24, r24
 d24:	61 f1       	breq	.+88     	; 0xd7e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	88 0f       	add	r24, r24
 d2a:	99 1f       	adc	r25, r25
 d2c:	fc 01       	movw	r30, r24
 d2e:	e2 55       	subi	r30, 0x52	; 82
 d30:	ff 4f       	sbci	r31, 0xFF	; 255
 d32:	c5 91       	lpm	r28, Z+
 d34:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 d36:	fc 01       	movw	r30, r24
 d38:	ec 55       	subi	r30, 0x5C	; 92
 d3a:	ff 4f       	sbci	r31, 0xFF	; 255
 d3c:	a5 91       	lpm	r26, Z+
 d3e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 d40:	61 11       	cpse	r22, r1
 d42:	09 c0       	rjmp	.+18     	; 0xd56 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 d44:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d46:	f8 94       	cli
		*reg &= ~bit;
 d48:	88 81       	ld	r24, Y
 d4a:	20 95       	com	r18
 d4c:	82 23       	and	r24, r18
 d4e:	88 83       	st	Y, r24
		*out &= ~bit;
 d50:	ec 91       	ld	r30, X
 d52:	2e 23       	and	r18, r30
 d54:	0b c0       	rjmp	.+22     	; 0xd6c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 d56:	62 30       	cpi	r22, 0x02	; 2
 d58:	61 f4       	brne	.+24     	; 0xd72 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 d5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 d5c:	f8 94       	cli
		*reg &= ~bit;
 d5e:	88 81       	ld	r24, Y
 d60:	32 2f       	mov	r19, r18
 d62:	30 95       	com	r19
 d64:	83 23       	and	r24, r19
 d66:	88 83       	st	Y, r24
		*out |= bit;
 d68:	ec 91       	ld	r30, X
 d6a:	2e 2b       	or	r18, r30
 d6c:	2c 93       	st	X, r18
		SREG = oldSREG;
 d6e:	9f bf       	out	0x3f, r25	; 63
 d70:	06 c0       	rjmp	.+12     	; 0xd7e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 d72:	8f b7       	in	r24, 0x3f	; 63
                cli();
 d74:	f8 94       	cli
		*reg |= bit;
 d76:	e8 81       	ld	r30, Y
 d78:	2e 2b       	or	r18, r30
 d7a:	28 83       	st	Y, r18
		SREG = oldSREG;
 d7c:	8f bf       	out	0x3f, r24	; 63
	}
}
 d7e:	df 91       	pop	r29
 d80:	cf 91       	pop	r28
 d82:	08 95       	ret

00000d84 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 d84:	1f 93       	push	r17
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 d8a:	28 2f       	mov	r18, r24
 d8c:	30 e0       	ldi	r19, 0x00	; 0
 d8e:	f9 01       	movw	r30, r18
 d90:	e8 59       	subi	r30, 0x98	; 152
 d92:	ff 4f       	sbci	r31, 0xFF	; 255
 d94:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 d96:	f9 01       	movw	r30, r18
 d98:	e4 58       	subi	r30, 0x84	; 132
 d9a:	ff 4f       	sbci	r31, 0xFF	; 255
 d9c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 d9e:	f9 01       	movw	r30, r18
 da0:	e0 57       	subi	r30, 0x70	; 112
 da2:	ff 4f       	sbci	r31, 0xFF	; 255
 da4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 da6:	cc 23       	and	r28, r28
 da8:	c1 f0       	breq	.+48     	; 0xdda <digitalWrite+0x56>
 daa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 dac:	81 11       	cpse	r24, r1
 dae:	0e 94 5d 06 	call	0xcba	; 0xcba <turnOffPWM>

	out = portOutputRegister(port);
 db2:	ec 2f       	mov	r30, r28
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	ee 0f       	add	r30, r30
 db8:	ff 1f       	adc	r31, r31
 dba:	ec 55       	subi	r30, 0x5C	; 92
 dbc:	ff 4f       	sbci	r31, 0xFF	; 255
 dbe:	a5 91       	lpm	r26, Z+
 dc0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 dc2:	9f b7       	in	r25, 0x3f	; 63
	cli();
 dc4:	f8 94       	cli

	if (val == LOW) {
 dc6:	11 11       	cpse	r17, r1
 dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <digitalWrite+0x4e>
		*out &= ~bit;
 dca:	8c 91       	ld	r24, X
 dcc:	d0 95       	com	r29
 dce:	d8 23       	and	r29, r24
 dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <digitalWrite+0x52>
	} else {
		*out |= bit;
 dd2:	ec 91       	ld	r30, X
 dd4:	de 2b       	or	r29, r30
 dd6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 dd8:	9f bf       	out	0x3f, r25	; 63
}
 dda:	df 91       	pop	r29
 ddc:	cf 91       	pop	r28
 dde:	1f 91       	pop	r17
 de0:	08 95       	ret

00000de2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 de2:	08 95       	ret

00000de4 <__tablejump2__>:
 de4:	ee 0f       	add	r30, r30
 de6:	ff 1f       	adc	r31, r31
 de8:	05 90       	lpm	r0, Z+
 dea:	f4 91       	lpm	r31, Z
 dec:	e0 2d       	mov	r30, r0
 dee:	09 94       	ijmp

00000df0 <_exit>:
 df0:	f8 94       	cli

00000df2 <__stop_program>:
 df2:	ff cf       	rjmp	.-2      	; 0xdf2 <__stop_program>
